// Package serverhttp provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package serverhttp

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for ResponseStatusErrorCode.
const (
	Error ResponseStatusErrorCode = "error"
)

// Defines values for ResponseStatusOkCode.
const (
	Ok ResponseStatusOkCode = "ok"
)

// GenerateSpecHttpResponse200 defines model for GenerateSpecHttpResponse200.
type GenerateSpecHttpResponse200 struct {
	// Spec Содержимое спецификации
	Spec   []byte           `json:"spec"`
	Status ResponseStatusOk `json:"status"`
}

// GenerateSpecHttpResponse500 defines model for GenerateSpecHttpResponse500.
type GenerateSpecHttpResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// ResponseStatusError defines model for ResponseStatusError.
type ResponseStatusError struct {
	Code        ResponseStatusErrorCode `json:"code"`
	Description string                  `json:"description"`
}

// ResponseStatusErrorCode defines model for ResponseStatusError.Code.
type ResponseStatusErrorCode string

// ResponseStatusOk defines model for ResponseStatusOk.
type ResponseStatusOk struct {
	Code        ResponseStatusOkCode `json:"code"`
	Description string               `json:"description"`
}

// ResponseStatusOkCode defines model for ResponseStatusOk.Code.
type ResponseStatusOkCode string

// UploadSpecHttpRequest defines model for UploadSpecHttpRequest.
type UploadSpecHttpRequest struct {
	// Name Название приложения спецификация которого выгружается
	Name string `json:"name"`

	// Spec Содержимое спецификации
	Spec []byte `json:"spec"`
}

// UploadSpecHttpResponse200 defines model for UploadSpecHttpResponse200.
type UploadSpecHttpResponse200 struct {
	Status ResponseStatusOk `json:"status"`
}

// UploadSpecHttpResponse500 defines model for UploadSpecHttpResponse500.
type UploadSpecHttpResponse500 struct {
	Status ResponseStatusError `json:"status"`
}

// GenerateSpecClientHttpParams defines parameters for GenerateSpecClientHttp.
type GenerateSpecClientHttpParams struct {
	// Name Наименование сервера спецификации для которого генерируется клиент
	Name string `form:"name" json:"name"`
}

// GenerateSpecServerHttpParams defines parameters for GenerateSpecServerHttp.
type GenerateSpecServerHttpParams struct {
	// Name Наименование сервера спецификации
	Name string `form:"name" json:"name"`
}

// UploadSpecHttpJSONRequestBody defines body for UploadSpecHttp for application/json ContentType.
type UploadSpecHttpJSONRequestBody = UploadSpecHttpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/spechttpclient/)
	GenerateSpecClientHttp(ctx echo.Context, params GenerateSpecClientHttpParams) error

	// (POST /v1/spechttpclient/)
	UploadSpecHttp(ctx echo.Context) error

	// (GET /v1/spechttpserver/)
	GenerateSpecServerHttp(ctx echo.Context, params GenerateSpecServerHttpParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GenerateSpecClientHttp converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateSpecClientHttp(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateSpecClientHttpParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateSpecClientHttp(ctx, params)
	return err
}

// UploadSpecHttp converts echo context to params.
func (w *ServerInterfaceWrapper) UploadSpecHttp(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadSpecHttp(ctx)
	return err
}

// GenerateSpecServerHttp converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateSpecServerHttp(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateSpecServerHttpParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GenerateSpecServerHttp(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/spechttpclient/", wrapper.GenerateSpecClientHttp)
	router.POST(baseURL+"/v1/spechttpclient/", wrapper.UploadSpecHttp)
	router.GET(baseURL+"/v1/spechttpserver/", wrapper.GenerateSpecServerHttp)

}

type GenerateSpecClientHttpRequestObject struct {
	Params GenerateSpecClientHttpParams
}

type GenerateSpecClientHttpResponseObject interface {
	VisitGenerateSpecClientHttpResponse(w http.ResponseWriter) error
}

type GenerateSpecClientHttp200JSONResponse GenerateSpecHttpResponse200

func (response GenerateSpecClientHttp200JSONResponse) VisitGenerateSpecClientHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateSpecClientHttp500JSONResponse GenerateSpecHttpResponse500

func (response GenerateSpecClientHttp500JSONResponse) VisitGenerateSpecClientHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UploadSpecHttpRequestObject struct {
	Body *UploadSpecHttpJSONRequestBody
}

type UploadSpecHttpResponseObject interface {
	VisitUploadSpecHttpResponse(w http.ResponseWriter) error
}

type UploadSpecHttp200JSONResponse UploadSpecHttpResponse200

func (response UploadSpecHttp200JSONResponse) VisitUploadSpecHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UploadSpecHttp500JSONResponse UploadSpecHttpResponse500

func (response UploadSpecHttp500JSONResponse) VisitUploadSpecHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GenerateSpecServerHttpRequestObject struct {
	Params GenerateSpecServerHttpParams
}

type GenerateSpecServerHttpResponseObject interface {
	VisitGenerateSpecServerHttpResponse(w http.ResponseWriter) error
}

type GenerateSpecServerHttp200JSONResponse GenerateSpecHttpResponse200

func (response GenerateSpecServerHttp200JSONResponse) VisitGenerateSpecServerHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GenerateSpecServerHttp500JSONResponse GenerateSpecHttpResponse500

func (response GenerateSpecServerHttp500JSONResponse) VisitGenerateSpecServerHttpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /v1/spechttpclient/)
	GenerateSpecClientHttp(ctx context.Context, request GenerateSpecClientHttpRequestObject) (GenerateSpecClientHttpResponseObject, error)

	// (POST /v1/spechttpclient/)
	UploadSpecHttp(ctx context.Context, request UploadSpecHttpRequestObject) (UploadSpecHttpResponseObject, error)

	// (GET /v1/spechttpserver/)
	GenerateSpecServerHttp(ctx context.Context, request GenerateSpecServerHttpRequestObject) (GenerateSpecServerHttpResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GenerateSpecClientHttp operation middleware
func (sh *strictHandler) GenerateSpecClientHttp(ctx echo.Context, params GenerateSpecClientHttpParams) error {
	var request GenerateSpecClientHttpRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateSpecClientHttp(ctx.Request().Context(), request.(GenerateSpecClientHttpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateSpecClientHttp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateSpecClientHttpResponseObject); ok {
		return validResponse.VisitGenerateSpecClientHttpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadSpecHttp operation middleware
func (sh *strictHandler) UploadSpecHttp(ctx echo.Context) error {
	var request UploadSpecHttpRequestObject

	var body UploadSpecHttpJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UploadSpecHttp(ctx.Request().Context(), request.(UploadSpecHttpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadSpecHttp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadSpecHttpResponseObject); ok {
		return validResponse.VisitUploadSpecHttpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GenerateSpecServerHttp operation middleware
func (sh *strictHandler) GenerateSpecServerHttp(ctx echo.Context, params GenerateSpecServerHttpParams) error {
	var request GenerateSpecServerHttpRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateSpecServerHttp(ctx.Request().Context(), request.(GenerateSpecServerHttpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateSpecServerHttp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GenerateSpecServerHttpResponseObject); ok {
		return validResponse.VisitGenerateSpecServerHttpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVz077RhB+FWvao4VDKy6+tVXVH+qBqlFPKAfjDGBI1st6jRQhSwmteuGA1F5bVX0D",
	"FwhE/DGvMPtG1aydhCROoBVNL7+Trf0z8+3M931zBmHclbFAoRPwzyAJD7Eb2N9vUKAKNDYlhh+0lt9j",
	"ImOR4GeNBm9LFUtUOsLynsSQv21MQhVJHcUCfKA/qaAbGpo+3dKIHqmgoWMG9ExD8zONzE80onvK+Z9G",
	"4MJ+rLqBBh/2ehrBBd2TCD4kWkXiADIXEh3o1Cb8VOE++PCJN8XvVeC9MdKmPb1zDFnmgsKTNFLYBn93",
	"HMYtYbcmieK9Iww1J1r2+K3ax/8LVF8rFatlwOoQ1V1fQBLGbeQvirTL8dAea9VUcqZRZ/P7c7Bs2Nk7",
	"r0PcOX4dX3y8NnA/yE4ctKf9PEkx0YsIRdDFGiL/Tjnd0RXl9EQjGjr0bPo0ogcq6JaGvGgulzDbXDp0",
	"T4U5p8L0qaBrKhy6Mhd0bfrmR7qlnIbm3AzMZS3j1yGsuYraGqwQx3wpV/nCuwr27WD+L51yxzBMVaR7",
	"TY5XJt7DQKGa+CtfqJYmAQ61lpDx/Ujsx6VWhA5Cpui8IoB+Y8owBcyFQzf0wOTrU05/Mc/MhWMGzhff",
	"bTssjQMUnCXSHU5TrfAuuHCKKikjbm40uJixRBHICHz4fKOxsQkuyEAf2jd4p5seM4KBhp0IhfZ4+QB1",
	"DT1/tZpgeo4lsIycrI0HlhQ9mXPKHVsHC0QFHG27Df6MG39lc38oj8lABV3UqBLwd2tFy+JgLMUL8ZqB",
	"hXZVAlwBrazsonqvJ88bWQ1X+p15C3AnwYeTFFUP3MpYxtqakkmrFN1q7taZXYsPl4y0fahkxuxAYWsf",
	"SNmJQlst7ygpLXMabxXVV414y8XZgu58yxzZWgOArXoA20KjEkHHaaI6ReWMxZm5IOOkjoi/THz2jhu7",
	"vNdznKil4azVVF3ERH8Zt3vvVpL6OVVTDPqDciv6R8u/PlvBHeV2MhVmQPkCzbL/kErLZ8JaiLR8CvwD",
	"Gk2927rJ2LV3W1mLN186YGJvvo8DvoV6L4VSol6HA370sDV6WMk/XitbmaoO+OBB1sr+DgAA//92mr0/",
	"pg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
